# .github/workflows/build-tesina.yml

name: Build Tesina PDF

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'config.yml'
      - 'styles/**'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kjarosh/latex:2025.1-small

    steps:
    - name: Install dependencies
      run: |
        apk add --no-cache git python3 py3-pip pandoc
        pip install --break-system-packages pyyaml

    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract metadata from config.yml
      id: metadata
      run: |
        python3 << 'EOF'
import yaml
import os

with open('config.yml', 'r') as f:
    config = yaml.safe_load(f)

# Estrarre nested values
meta = config.get('metadata', {})
cand = config.get('candidato', {})
esame = config.get('esame', {})
cons = config.get('conservatorio', {})

# Scrivere in GITHUB_ENV per usarle nei passi successivi
with open(os.environ['GITHUB_ENV'], 'a') as env:
    env.write(f"TITOLO={meta.get('titolo', 'Untitled')}\n")
    env.write(f"SOTTOTITOLO={meta.get('sottotitolo', '')}\n")
    env.write(f"CANDIDATO={cand.get('nome', 'Candidato')}\n")
    env.write(f"MATERIA={esame.get('materia', '')}\n")
    env.write(f"DATA={esame.get('data', '')}\n")
    env.write(f"CONSERVATORIO={cons.get('nome', '')}\n")
    env.write(f"CITTÀ={cons.get('città', '')}\n")
    env.write(f"CORSO={cons.get('corso', '')}\n")
EOF

    - name: Concatenate markdown files (in order)
      run: |
        cat docs/*.md > merged.md

    - name: Build PDF with Pandoc
      run: |
        pandoc merged.md \
          --template=styles/tesina-pandoc.latex \
          --pdf-engine=pdflatex \
          --variable=titolo:"$TITOLO" \
          --variable=sottotitolo:"$SOTTOTITOLO" \
          --variable=candidato:"$CANDIDATO" \
          --variable=materia:"$MATERIA" \
          --variable=data:"$DATA" \
          --variable=conservatorio:"$CONSERVATORIO" \
          --variable=città:"$CITTÀ" \
          --variable=corso:"$CORSO" \
          -o tesina.pdf

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tesina-pdf
        path: tesina.pdf
        overwrite: true

    - name: Commit & Push PDF
      run: |
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add tesina.pdf 2>/dev/null || true
        git diff --staged --quiet || git commit -m "Auto-build: tesina PDF"
        git push
