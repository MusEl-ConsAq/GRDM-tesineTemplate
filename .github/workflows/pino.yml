name:   questo è pino

on:
  push:
    branches: [ main ]
    paths:
      - '**/**'

permissions:
  contents: write
  pages: write
  id-token: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kjarosh/latex:2025.1-small

    steps:
    - name: Install System & Build Dependencies
      run: |
        # --- SOLUZIONE: Modifichiamo i repository di sistema per puntare a 'edge' ---
        echo "https://dl-cdn.alpinelinux.org/alpine/edge/main" > /etc/apk/repositories
        echo "https://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
        echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

        # Aggiorniamo l'indice dei pacchetti con la nuova lista
        apk update
        
        # Ora installiamo tutto. Apk troverà ghc e cabal-install senza problemi.
        apk add --no-cache \
          git bash tar python3 py3-pip pandoc \
          ghc cabal-install gmp zlib
          
        pip install --break-system-packages pyyaml

    - name: Cache and build pandoc-crossref from source
      uses: actions/cache@v4
      id: cache-pandoc-crossref
      with:
        key: pandoc-crossref-v0.3.17.0-alpine-edge
        path: |
          /usr/local/bin/pandoc-crossref
          ~/.cabal

    - name: Build and install pandoc-crossref if not cached
      if: steps.cache-pandoc-crossref.outputs.cache-hit != 'true'
      run: |
        echo "Cache not found. Compiling pandoc-crossref from source..."
        cabal update
        cabal install pandoc-crossref-0.3.17.0 --install-method=copy --overwrite-policy=always
        mv ~/.cabal/bin/pandoc-crossref /usr/local/bin/
        chmod +x /usr/local/bin/pandoc-crossref
        echo "pandoc-crossref compiled and installed successfully."

    - name: Verify pandoc-crossref installation
      run: |
        echo "Verifying pandoc-crossref..."
        pandoc-crossref --version

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract metadata & concatenate markdown
      run: |
        rm -f README.md *.pdf        
        python3 .github/scripts/build-tesina.py

    - name: Build PDF with Pandoc
      run: |
        TITLE=$(sed -n '/^---$/,/^---$/p' README.md | grep '^title:' | head -n1 | sed 's/title:[[:space:]]*//; s/^ *//; s/ *$//; s/[*]//g')
        SAFE_TITLE=$(echo "$TITLE" | tr ' ' '_' | tr -cd '[:alnum:]_')
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        PDF_NAME="${SAFE_TITLE}-CONSAQ-${TIMESTAMP}.pdf"
        pandoc README.md \
          --filter pandoc-crossref \
          --pdf-engine=xelatex \
          --template=styles/templatePandoc.latex \
          --lua-filter=lua-filters/multibib.lua \
          -o "$PDF_NAME"
        echo "PDF_NAME=$PDF_NAME" >> $GITHUB_ENV
        mkdir -p pages_artifact
        cp "${PDF_NAME}" pages_artifact/latest.pdf
    
    # ... il resto del tuo workflow rimane identico (upload-artifact, commit, push, ecc.) ...
    - uses: actions/upload-artifact@v4
      with:
        name: progetto-completo_pdf
        path: "${{ env.PDF_NAME }}"
        overwrite: true
 
    - name: Upload artifact per Pages
      uses: actions/upload-pages-artifact@v4
      with:
        path: pages_artifact

    - name: Commit del documento assemblato
      run: |
        cd "$GITHUB_WORKSPACE"
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        rm -f *.pdf
        git add -u
        git add README.md
        git diff --staged --quiet || git commit -m "Auto-aggiornamento documento con template [skip ci]"
        
    - name: Push delle modifiche
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
